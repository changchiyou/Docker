[
  {
    "id": "股票分析",
    "user_id": "29cdb3f9-ffa8-4978-9f0d-784a2796a858",
    "name": "股票分析",
    "content": "\"\"\"\ntitle: 股票分析\ndescription: 一款全面的股票分析工具，可從 Finnhub 免費 API 收集數據並編制詳細報告。\nauthor: changchiyou\nauthor_url: https://github.com/changchiyou\ngithub: https://github.com/changchiyou\noriginal_author: ekatiyar\noriginal_author_url: https://github.com/christ-offer/\noriginal_github: https://github.com/christ-offer/open-webui-tools\nfunding_url: https://github.com/open-webui\nversion: 0.0.10\nlicense: MIT\nrequirements: finnhub-python\n\"\"\"\n\nimport sys\nimport finnhub\nimport requests\nimport aiohttp\nimport asyncio\nfrom transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\nimport torch\nfrom bs4 import BeautifulSoup\nfrom pydantic import BaseModel, Field\nfrom datetime import datetime, timedelta\nfrom typing import (\n    Dict,\n    Any,\n    List,\n    Union,\n    Generator,\n    Iterator,\n    Tuple,\n    Optional,\n    Callable,\n    Awaitable,\n)\nfrom functools import lru_cache\n\n\ndef _format_date(date: datetime) -> str:\n    \"\"\"Helper function to format date for Finnhub API\"\"\"\n    return date.strftime(\"%Y-%m-%d\")\n\n\n# Caching for expensive operations\n@lru_cache(maxsize=128)\ndef _get_sentiment_model():\n    model_name = \"mrm8488/distilroberta-finetuned-financial-news-sentiment-analysis\"\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\n    model = AutoModelForSequenceClassification.from_pretrained(model_name)\n    return tokenizer, model\n\n\ndef _get_basic_info(client: finnhub.Client, ticker: str) -> Dict[str, Any]:\n    \"\"\"\n    Fetch comprehensive company information from Finnhub API.\n    \"\"\"\n    profile = client.company_profile2(symbol=ticker)\n    basic_financials = client.company_basic_financials(ticker, \"all\")\n    peers = client.company_peers(ticker)\n\n    return {\"profile\": profile, \"basic_financials\": basic_financials, \"peers\": peers}\n\n\ndef _get_current_price(client: finnhub.Client, ticker: str) -> Dict[str, float]:\n    \"\"\"\n    Fetch current price and daily change from Finnhub API.\n    \"\"\"\n    quote = client.quote(ticker)\n    return {\n        \"current_price\": quote[\"c\"],\n        \"change\": quote[\"dp\"],\n        \"change_amount\": quote[\"d\"],\n        \"high\": quote[\"h\"],\n        \"low\": quote[\"l\"],\n        \"open\": quote[\"o\"],\n        \"previous_close\": quote[\"pc\"],\n    }\n\n\ndef _get_company_news(client: finnhub.Client, ticker: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Fetch recent news articles about the company from Finnhub API.\n    Returns a list of dictionaries containing news item details.\n    \"\"\"\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=7)\n    news = client.company_news(ticker, _format_date(start_date), _format_date(end_date))\n\n    news_items = news[:10]  # Get the first 10 news items\n\n    return [{\"url\": item[\"url\"], \"title\": item[\"headline\"]} for item in news_items]\n\n\nasync def _async_web_scrape(session: aiohttp.ClientSession, url: str) -> str:\n    \"\"\"\n    Scrape and process a web page using r.jina.ai\n\n    :param session: The aiohttp ClientSession to use for the request.\n    :param url: The URL of the web page to scrape.\n    :return: The scraped and processed content without the Links/Buttons section, or an error message.\n    \"\"\"\n    jina_url = f\"https://r.jina.ai/{url}\"\n\n    headers = {\n        \"X-No-Cache\": \"true\",\n        \"X-With-Images-Summary\": \"true\",\n        \"X-With-Links-Summary\": \"true\",\n    }\n\n    try:\n        async with session.get(jina_url, headers=headers) as response:\n            response.raise_for_status()\n            content = await response.text()\n\n        # Extract content and remove Links/Buttons section as its too many tokens\n        links_section_start = content.rfind(\"Images:\")\n        if links_section_start != -1:\n            content = content[:links_section_start].strip()\n\n        return content\n\n    except aiohttp.ClientError as e:\n        return f\"Error scraping web page: {str(e)}\"\n\n\n# Asynchronous sentiment analysis\nasync def _async_sentiment_analysis(content: str) -> Dict[str, Union[str, float]]:\n    tokenizer, model = _get_sentiment_model()\n\n    inputs = tokenizer(content, return_tensors=\"pt\", truncation=True, max_length=512)\n\n    with torch.no_grad():\n        outputs = model(**inputs)\n\n    probabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)\n    sentiment_scores = probabilities.tolist()[0]\n\n    # Update sentiment labels to match the new model's output\n    sentiments = [\"Neutral\", \"Positive\", \"Negative\"]\n    sentiment = sentiments[sentiment_scores.index(max(sentiment_scores))]\n\n    confidence = max(sentiment_scores)\n\n    return {\"sentiment\": sentiment, \"confidence\": confidence}\n\n\n# Asynchronous data gathering\nasync def _async_gather_stock_data(\n    client: finnhub.Client, ticker: str\n) -> Dict[str, Any]:\n    basic_info = _get_basic_info(client, ticker)\n    current_price = _get_current_price(client, ticker)\n    news_items = _get_company_news(client, ticker)\n\n    async with aiohttp.ClientSession() as session:\n        scrape_tasks = [_async_web_scrape(session, item[\"url\"]) for item in news_items]\n        contents = await asyncio.gather(*scrape_tasks)\n\n    sentiment_tasks = [\n        _async_sentiment_analysis(content) for content in contents if content\n    ]\n    sentiments = await asyncio.gather(*sentiment_tasks)\n\n    sentiment_results = [\n        {\n            \"url\": news_items[i][\"url\"],\n            \"title\": news_items[i][\"title\"],\n            # \"content\": contents[i][:500] + \"...\" if contents[i] and len(contents[i]) > 500 else contents[i],\n            \"sentiment\": sentiment[\"sentiment\"],\n            \"confidence\": sentiment[\"confidence\"],\n        }\n        for i, sentiment in enumerate(sentiments)\n        if contents[i]\n    ]\n\n    return {\n        \"basic_info\": basic_info,\n        \"current_price\": current_price,\n        \"sentiments\": sentiment_results,\n    }\n\n\ndef _compile_report(data: Dict[str, Any]) -> str:\n    \"\"\"\n    Compile gathered data into a comprehensive structured report.\n    \"\"\"\n    profile = data[\"basic_info\"][\"profile\"]\n    financials = data[\"basic_info\"][\"basic_financials\"]\n    metrics = financials[\"metric\"]\n    peers = data[\"basic_info\"][\"peers\"]\n    price_data = data[\"current_price\"]\n\n    report = f\"\"\"\n    Comprehensive Stock Analysis Report for {profile['name']} ({profile['ticker']})\n\n    Basic Information:\n    Industry: {profile.get('finnhubIndustry', 'N/A')}\n    Market Cap: {profile.get('marketCapitalization', 'N/A'):,.0f} M USD\n    Share Outstanding: {profile.get('shareOutstanding', 'N/A'):,.0f} M\n    Country: {profile.get('country', 'N/A')}\n    Exchange: {profile.get('exchange', 'N/A')}\n    IPO Date: {profile.get('ipo', 'N/A')}\n\n    Current Trading Information:\n    Current Price: ${price_data['current_price']:.2f}\n    Daily Change: {price_data['change']:.2f}% (${price_data['change_amount']:.2f})\n    Day's Range: ${price_data['low']:.2f} - ${price_data['high']:.2f}\n    Open: ${price_data['open']:.2f}\n    Previous Close: ${price_data['previous_close']:.2f}\n\n    Key Financial Metrics:\n    52 Week High: ${financials['metric'].get('52WeekHigh', 'N/A')}\n    52 Week Low: ${financials['metric'].get('52WeekLow', 'N/A')}\n    P/E Ratio: {financials['metric'].get('peBasicExclExtraTTM', 'N/A')}\n    EPS (TTM): ${financials['metric'].get('epsBasicExclExtraItemsTTM', 'N/A')}\n    Return on Equity: {financials['metric'].get('roeRfy', 'N/A')}%\n    Debt to Equity: {financials['metric'].get('totalDebtToEquityQuarterly', 'N/A')}\n    Current Ratio: {financials['metric'].get('currentRatioQuarterly', 'N/A')}\n    Dividend Yield: {financials['metric'].get('dividendYieldIndicatedAnnual', 'N/A')}%\n\n    Peer Companies: {', '.join(peers[:5])}\n\n    Detailed Financial Analysis:\n\n    1. Valuation Metrics:\n    P/E Ratio: {metrics.get('peBasicExclExtraTTM', 'N/A')}\n    - Interpretation: {'High (may be overvalued)' if metrics.get('peBasicExclExtraTTM', 0) > 25 else 'Moderate' if 15 <= metrics.get('peBasicExclExtraTTM', 0) <= 25 else 'Low (may be undervalued)'}\n\n    P/B Ratio: {metrics.get('pbQuarterly', 'N/A')}\n    - Interpretation: {'High' if metrics.get('pbQuarterly', 0) > 3 else 'Moderate' if 1 <= metrics.get('pbQuarterly', 0) <= 3 else 'Low'}\n\n    2. Profitability Metrics:\n    Return on Equity: {metrics.get('roeRfy', 'N/A')}%\n    - Interpretation: {'Excellent' if metrics.get('roeRfy', 0) > 20 else 'Good' if 15 <= metrics.get('roeRfy', 0) <= 20 else 'Average' if 10 <= metrics.get('roeRfy', 0) < 15 else 'Poor'}\n\n    Net Profit Margin: {metrics.get('netProfitMarginTTM', 'N/A')}%\n    - Interpretation: {'Excellent' if metrics.get('netProfitMarginTTM', 0) > 20 else 'Good' if 10 <= metrics.get('netProfitMarginTTM', 0) <= 20 else 'Average' if 5 <= metrics.get('netProfitMarginTTM', 0) < 10 else 'Poor'}\n\n    3. Liquidity and Solvency:\n    Current Ratio: {metrics.get('currentRatioQuarterly', 'N/A')}\n    - Interpretation: {'Strong' if metrics.get('currentRatioQuarterly', 0) > 2 else 'Healthy' if 1.5 <= metrics.get('currentRatioQuarterly', 0) <= 2 else 'Adequate' if 1 <= metrics.get('currentRatioQuarterly', 0) < 1.5 else 'Poor'}\n\n    Debt-to-Equity Ratio: {metrics.get('totalDebtToEquityQuarterly', 'N/A')}\n    - Interpretation: {'Low leverage' if metrics.get('totalDebtToEquityQuarterly', 0) < 0.5 else 'Moderate leverage' if 0.5 <= metrics.get('totalDebtToEquityQuarterly', 0) <= 1 else 'High leverage'}\n\n    4. Dividend Analysis:\n    Dividend Yield: {metrics.get('dividendYieldIndicatedAnnual', 'N/A')}%\n    - Interpretation: {'High yield' if metrics.get('dividendYieldIndicatedAnnual', 0) > 4 else 'Moderate yield' if 2 <= metrics.get('dividendYieldIndicatedAnnual', 0) <= 4 else 'Low yield'}\n\n    5. Market Performance:\n    52-Week Range: ${metrics.get('52WeekLow', 'N/A')} - ${metrics.get('52WeekHigh', 'N/A')}\n    Current Price Position: {((price_data['current_price'] - metrics.get('52WeekLow', price_data['current_price'])) / (metrics.get('52WeekHigh', price_data['current_price']) - metrics.get('52WeekLow', price_data['current_price'])) * 100):.2f}% of 52-Week Range\n\n    Beta: {metrics.get('beta', 'N/A')}\n    - Interpretation: {'More volatile than market' if metrics.get('beta', 1) > 1 else 'Less volatile than market' if metrics.get('beta', 1) < 1 else 'Same volatility as market'}\n\n    Overall Analysis:\n    {profile['name']} shows {'strong' if metrics.get('roeRfy', 0) > 15 and metrics.get('currentRatioQuarterly', 0) > 1.5 else 'moderate' if metrics.get('roeRfy', 0) > 10 and metrics.get('currentRatioQuarterly', 0) > 1 else 'weak'} financial health with {'high' if metrics.get('peBasicExclExtraTTM', 0) > 25 else 'moderate' if 15 <= metrics.get('peBasicExclExtraTTM', 0) <= 25 else 'low'} valuation metrics. The company's profitability is {'excellent' if metrics.get('netProfitMarginTTM', 0) > 20 else 'good' if metrics.get('netProfitMarginTTM', 0) > 10 else 'average' if metrics.get('netProfitMarginTTM', 0) > 5 else 'poor'}, and it has {'low' if metrics.get('totalDebtToEquityQuarterly', 0) < 0.5 else 'moderate' if metrics.get('totalDebtToEquityQuarterly', 0) < 1 else 'high'} financial leverage. Investors should consider these factors along with their investment goals and risk tolerance.\n\n\n    Recent News and Sentiment Analysis:\n    \"\"\"\n\n    for item in data[\"sentiments\"]:\n        report += f\"\"\"\n    Title: {item['title']}\n    URL: {item['url']}\n    Sentiment Analysis: {item['sentiment']} (Confidence: {item['confidence']:.2f})\n\n    \"\"\"\n    # Content Preview: {item['content'][:500]}...\n    return report\n\nasync def noop_event_emitter(event: Any) -> None:\n    pass\n\nclass Tools:\n    class Valves(BaseModel):\n        FINNHUB_API_KEY: str = Field(\n            default=\"\",\n            description=\"Global Finnhub API key.\"\n        )\n    class UserValves(BaseModel):\n        USER_FINNHUB_API_KEY: str = Field(\n            default=\"\",\n            description=\"Your personal Finnhub API key. Allows for individual API call limits and personalized usage of the tool.\"\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    async def compile_stock_report(\n        self,\n        ticker: str,\n        __user__: dict = {},\n        __event_emitter__: Callable[[Any], Awaitable[None]] = noop_event_emitter\n    ) -> str:\n        \"\"\"\n        Perform a comprehensive stock analysis and compile a detailed report for a given ticker using Finnhub's API.\n\n        This function gathers various data points including:\n        - Basic company information (industry, market cap, etc.)\n        - Current trading information (price, daily change, etc.)\n        - Key financial metrics (P/E ratio, EPS, ROE, etc.)\n        - List of peer companies\n        - Recent news articles with sentiment analysis using FinBERT\n\n        The gathered data is then compiled into a structured, easy-to-read report.\n\n        :param ticker: The stock ticker symbol (e.g., \"AAPL\" for Apple Inc.).\n        :return: A comprehensive analysis report of the stock as a formatted string.\n        \"\"\"\n        await __event_emitter__(\n            {\n                \"type\": \"status\",\n                \"data\": {\"description\": \"Initializing client\", \"done\": False},\n            }\n        )\n\n        self.client = finnhub.Client(api_key=__user__[\"valves\"].USER_FINNHUB_API_KEY \\\n            if \"valves\" in __user__ and __user__[\"valves\"].USER_FINNHUB_API_KEY else \\\n            self.valves.FINNHUB_API_KEY)\n\n        await __event_emitter__(\n            {\n                \"type\": \"status\",\n                \"data\": {\"description\": \"Retrieving stock data\", \"done\": False},\n            }\n        )\n        data = await _async_gather_stock_data(self.client, ticker)\n        await __event_emitter__(\n            {\n                \"type\": \"status\",\n                \"data\": {\"description\": \"Compiling stock report\", \"done\": False},\n            }\n        )\n        report = _compile_report(data)\n        # Get lastest price from data\n        last_price = data[\"current_price\"][\"current_price\"]\n        await __event_emitter__(\n            {\n                \"type\": \"status\",\n                \"data\": {\n                    \"description\": \"Finished creating report - latest price: \"\n                    + str(last_price),\n                    \"done\": True,\n                },\n            }\n        )\n        return report\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"You must provide exactly 2 parameter as FINNHUB_API_KEY, TICKET\")\n        exit(1)\n    tool = Tools()\n    tool.valves.FINNHUB_API_KEY = sys.argv[1]\n\n    async def main():\n        result = await tool.compile_stock_report(sys.argv[2])\n        print(result)\n\n    asyncio.run(main())",
    "specs": [
      {
        "name": "compile_stock_report",
        "description": "Perform a comprehensive stock analysis and compile a detailed report for a given ticker using Finnhub's API. This function gathers various data points including: - Basic company information (industry, market cap, etc.) - Current trading information (price, daily change, etc.) - Key financial metrics (P/E ratio, EPS, ROE, etc.) - List of peer companies - Recent news articles with sentiment analysis using FinBERT The gathered data is then compiled into a structured, easy-to-read report.",
        "parameters": {
          "type": "object",
          "properties": {
            "ticker": {
              "type": "str",
              "description": "The stock ticker symbol (e.g., \"AAPL\" for Apple Inc.)."
            }
          },
          "required": [
            "ticker"
          ]
        }
      }
    ],
    "meta": {
      "description": "一款全面的股票分析工具，可從 Finnhub 免費 API 收集數據並編制詳細報告。",
      "manifest": {
        "title": "股票分析",
        "description": "一款全面的股票分析工具，可從 Finnhub 免費 API 收集數據並編制詳細報告。",
        "author": "changchiyou",
        "author_url": "https://github.com/changchiyou",
        "github": "https://github.com/changchiyou",
        "original_author": "ekatiyar",
        "original_author_url": "https://github.com/christ-offer/",
        "original_github": "https://github.com/christ-offer/open-webui-tools",
        "funding_url": "https://github.com/open-webui",
        "version": "0.0.10",
        "license": "MIT",
        "requirements": "finnhub-python"
      }
    },
    "updated_at": 1726730347,
    "created_at": 1726730347
  }
]